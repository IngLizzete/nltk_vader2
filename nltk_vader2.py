# -*- coding: utf-8 -*-
"""NLTK_VADER2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SudXiTPU196oKBVfCEZrBOnb4bIm3HWb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import nltk
import io
import os

import nltk
nltk.download('vader_lexicon')

from nltk.sentiment.vader import SentimentIntensityAnalyzer

sent = SentimentIntensityAnalyzer() # crete a objet /instance

sent.polarity_scores("located in the United States, you'll have to check the laws of the")

str1 = "This eBook is for the use of anyone anywhere in the United States and most other parts of the world at no cost and with almost no restrictions whatsoever."
sent.polarity_scores(str1)

# este codigo es para cargar el corpus
from nltk.corpus.reader import reviews  # aqui no lo voy a usar por que ya tengo mi dataset
reviews.head()

from google.colab import files
uploaded = files.upload()

df = pd.read_csv(io.BytesIO(uploaded['IMDB_dep.csv']))
df.head(3)

df.iloc[1][0]

sent.polarity_scores(df.iloc[1][0])

abc = sent.polarity_scores(df.iloc[1][0])
type(abc)

abc['compound']

abc['pos']

abc['neg']

score_com = []
score_pos = []
score_neg = []

for i in range(0, df.shape[0]):
    score = sent.polarity_scores(df.iloc[i][0])
    score1 = score['compound']
    score_com.append(score1)

    # positive
    score2 = score['pos']
    score_pos.append(score2)

    # negative
    score3 = score['neg']
    score_neg.append(score3)

df["Comp-Score"] = score_com
df["Pos-Score"] =  score_pos
df["Neg-Score"] =  score_neg

df.shape

df.head(5)

def determinar_sentimiento_final(row):
    if row['Comp-Score'] >= 0 and row['Pos-Score'] > row['Neg-Score']:
        return 'positive'
    elif row['Comp-Score'] < 0 and row['Neg-Score'] > row['Pos-Score']:
        return 'negative'
    else:
        return 'neutral'

# Aplicar la funci√≥n a cada fila y crear la columna sentimiento_final
df['sentimiento_final'] = df.apply(determinar_sentimiento_final, axis=1)

df

df.sentimiento.value_counts()

df.sentimiento_final.value_counts()

